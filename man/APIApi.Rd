% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api_api.R
\docType{class}
\name{APIApi}
\alias{APIApi}
\title{API operations}
\format{
An \code{R6Class} generator object
}
\description{
LAMP.API
}
\section{Methods}{

\describe{
\strong{ query } \emph{ Query the LAMP Database. }
Query the LAMP Database using a transformation document. All GET operations in this API schema document are available by replacing the period with an underscore (i.e. &#x60;$Participant_view(...)&#x60; instead of &#x60;Participant.view(...)&#x60;). The &#x60;origin&#x60;, &#x60;from&#x60;, and &#x60;to&#x60; parameters of EventStream functions are preserved but the &#x60;transform&#x60; parameter is not.

\itemize{
\item \emph{ @param } body character


\item status code : 200 | 200 Success

\item return type : object 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | 400 Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ schema } \emph{ View the API schema document. }
View this API schema document from a live server instance.

\itemize{


\item status code : 200 | 200 Success

\item return type : object 
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  query  ####################

library(LAMP)
var.body <- 'body_example' # character | 

#Query the LAMP Database.
result <- LAMP.API$query(var.body)


####################  schema  ####################

library(LAMP)

#View the API schema document.
result <- LAMP.API$schema()


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{APIApi$new()}}
\item \href{#method-query}{\code{APIApi$query()}}
\item \href{#method-queryWithHttpInfo}{\code{APIApi$queryWithHttpInfo()}}
\item \href{#method-schema}{\code{APIApi$schema()}}
\item \href{#method-schemaWithHttpInfo}{\code{APIApi$schemaWithHttpInfo()}}
\item \href{#method-clone}{\code{APIApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{APIApi$new(apiClient)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-query"></a>}}
\if{latex}{\out{\hypertarget{method-query}{}}}
\subsection{Method \code{query()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{APIApi$query(body, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-queryWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-queryWithHttpInfo}{}}}
\subsection{Method \code{queryWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{APIApi$queryWithHttpInfo(body, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-schema"></a>}}
\if{latex}{\out{\hypertarget{method-schema}{}}}
\subsection{Method \code{schema()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{APIApi$schema(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-schemaWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-schemaWithHttpInfo}{}}}
\subsection{Method \code{schemaWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{APIApi$schemaWithHttpInfo(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{APIApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
