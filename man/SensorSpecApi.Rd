% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sensor_spec_api.R
\docType{class}
\name{SensorSpecApi}
\alias{SensorSpecApi}
\title{SensorSpec operations}
\format{
An \code{R6Class} generator object
}
\description{
LAMP.SensorSpec
}
\section{Methods}{

\describe{
\strong{ all } \emph{ Get all SensorSpecs registered. }
Get all SensorSpecs registered by any Researcher.

\itemize{
\item \emph{ @param } transform character


\item status code : 200 | 200 Success

\item return type : array[object] 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | 400 Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 403 | 403 Authorization Failed

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 404 | 404 Not Found

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | 500 Internal Error

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ create } \emph{ Create a new SensorSpec. }
Create a new SensorSpec.

\itemize{
\item \emph{ @param } sensor.spec \link{SensorSpec}


\item status code : 200 | 200 Success

\item return type : character 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | 400 Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 403 | 403 Authorization Failed

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 404 | 404 Not Found

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | 500 Internal Error

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ delete } \emph{ Delete an SensorSpec. }
Delete an SensorSpec.

\itemize{
\item \emph{ @param } sensor.spec.name character


\item status code : 200 | 200 Success

\item return type : character 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | 400 Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 403 | 403 Authorization Failed

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 404 | 404 Not Found

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | 500 Internal Error

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ update } \emph{ Update an SensorSpec. }
Update an SensorSpec.

\itemize{
\item \emph{ @param } sensor.spec.name character
\item \emph{ @param } sensor.spec \link{SensorSpec}


\item status code : 200 | 200 Success

\item return type : character 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | 400 Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 403 | 403 Authorization Failed

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 404 | 404 Not Found

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | 500 Internal Error

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ view } \emph{ Get a SensorSpec. }
Get a SensorSpec.

\itemize{
\item \emph{ @param } sensor.spec.name character
\item \emph{ @param } transform character


\item status code : 200 | 200 Success

\item return type : array[object] 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | 400 Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 403 | 403 Authorization Failed

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 404 | 404 Not Found

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | 500 Internal Error

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  all  ####################

library(LAMP)

#Get all SensorSpecs registered.
result <- LAMP.SensorSpec$all()


####################  create  ####################

library(LAMP)
var.sensor.spec <- SensorSpec$new() # SensorSpec | 

#Create a new SensorSpec.
result <- LAMP.SensorSpec$create(var.sensor.spec)


####################  delete  ####################

library(LAMP)
var.sensor.spec.name <- 'sensor.spec.name_example' # character | 

#Delete an SensorSpec.
result <- LAMP.SensorSpec$delete(var.sensor.spec.name)


####################  update  ####################

library(LAMP)
var.sensor.spec.name <- 'sensor.spec.name_example' # character | 
var.sensor.spec <- SensorSpec$new() # SensorSpec | 

#Update an SensorSpec.
result <- LAMP.SensorSpec$update(var.sensor.spec.name, var.sensor.spec)


####################  view  ####################

library(LAMP)
var.sensor.spec.name <- 'sensor.spec.name_example' # character | 

#Get a SensorSpec.
result <- LAMP.SensorSpec$view(var.sensor.spec.name)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{SensorSpecApi$new()}}
\item \href{#method-all}{\code{SensorSpecApi$all()}}
\item \href{#method-allWithHttpInfo}{\code{SensorSpecApi$allWithHttpInfo()}}
\item \href{#method-create}{\code{SensorSpecApi$create()}}
\item \href{#method-createWithHttpInfo}{\code{SensorSpecApi$createWithHttpInfo()}}
\item \href{#method-delete}{\code{SensorSpecApi$delete()}}
\item \href{#method-deleteWithHttpInfo}{\code{SensorSpecApi$deleteWithHttpInfo()}}
\item \href{#method-update}{\code{SensorSpecApi$update()}}
\item \href{#method-updateWithHttpInfo}{\code{SensorSpecApi$updateWithHttpInfo()}}
\item \href{#method-view}{\code{SensorSpecApi$view()}}
\item \href{#method-viewWithHttpInfo}{\code{SensorSpecApi$viewWithHttpInfo()}}
\item \href{#method-clone}{\code{SensorSpecApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SensorSpecApi$new(apiClient)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-all"></a>}}
\if{latex}{\out{\hypertarget{method-all}{}}}
\subsection{Method \code{all()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SensorSpecApi$all(transform = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-allWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-allWithHttpInfo}{}}}
\subsection{Method \code{allWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SensorSpecApi$allWithHttpInfo(transform = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-create"></a>}}
\if{latex}{\out{\hypertarget{method-create}{}}}
\subsection{Method \code{create()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SensorSpecApi$create(sensor.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-createWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-createWithHttpInfo}{}}}
\subsection{Method \code{createWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SensorSpecApi$createWithHttpInfo(sensor.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-delete"></a>}}
\if{latex}{\out{\hypertarget{method-delete}{}}}
\subsection{Method \code{delete()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SensorSpecApi$delete(sensor.spec.name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-deleteWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-deleteWithHttpInfo}{}}}
\subsection{Method \code{deleteWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SensorSpecApi$deleteWithHttpInfo(sensor.spec.name, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update"></a>}}
\if{latex}{\out{\hypertarget{method-update}{}}}
\subsection{Method \code{update()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SensorSpecApi$update(sensor.spec.name, sensor.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-updateWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-updateWithHttpInfo}{}}}
\subsection{Method \code{updateWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SensorSpecApi$updateWithHttpInfo(sensor.spec.name, sensor.spec, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-view"></a>}}
\if{latex}{\out{\hypertarget{method-view}{}}}
\subsection{Method \code{view()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SensorSpecApi$view(sensor.spec.name, transform = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-viewWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-viewWithHttpInfo}{}}}
\subsection{Method \code{viewWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SensorSpecApi$viewWithHttpInfo(sensor.spec.name, transform = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SensorSpecApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
